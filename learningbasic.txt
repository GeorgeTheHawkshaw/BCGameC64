1: Line Numbers
In BASIC, you write out your own line numbers. Goood BASIC programmers get in the habit of writing their lines in multiples of 10 in the case that they should go back and add more lines in  between. You can clear a line by typing the line number. You can also view a specific line with the LIST command (LIST 239) or even list a range of line numbers (LIST 453-983)

2: Print Command
This is the most basic command of the basic language. It just prints characters to the string under quotation marks. There are, however a few neat things with Commodore 64's BASIC Print command. One of them is that when you type the first quotation mark, any non-character key, such as the cursor down key will print the character reperesentation of that command to the print statement. When you run the program, it will execute that command.

One feature of the print command is the option to cocatenate strings. By default, each seperate print statement makes a newline. However strings seperated by a semicolon (;) will be concatenated. 

Another feature of the print command is the feature of seperating two strings with a comma. The syntax for this would be (PRINT "FOO","BAR'). Instead of adding the two strings together, it seperates the strings into columns. The example output would be (FOO       BAR       ). Each column is 10 characters long on the Commodore 64. The number of characters for each column depends on the model of computer. For example, the IBM and TI have 14 characters and the Apple has 16 characters.


Each PRINT statement makes a new line, unless a comma or semicolon is involved. Commas will put text on a single line. You can make an empty new line (equivilent to \n) with an empty print command.

3: For Loops
For loops in BASIC is pretty... basic. The syntax goes as follows
10 FOR I = 1 TO 4
20 PRINT "HELLO"
30 NEXT I

Lines 10 - 30 would be your block of code for the for loop. The incrementation occurs on the bottom of the block with the NEXT command, with the name of your variable (I) as its parameter. 

Here's an example of a nested for loop in BASIC

5 FOR J = 1 TO 3
10 FOR I = 1 TO 4
20 PRINT "HELLO"
30 NEXT I
40 PRINT "GOODBYE"
50 NEXT J

Output:
HELLO
HELLO
HELLO
HELLO
GOODBYE
HELLO
HELLO
HELLO
HELLO
GOODBYE
HELLO
HELLO
HELLO
HELLO
GOODBYE

The domain of the loop is inclusive (in the example, 1 and 3 are included)

FOR Loops as timers:
Since the BASIC OS on the C64 is slow, you can make timers by using for loops. Counting from 1 to 1,000 can take up to a second. Because of this, you can use a simple for loop that counts to 1,000 to set a timer of one second. Of course, the actual time it takes to count to these numbers depend on the computer.

:Input
The syntax for waiting for a user's input goes as follows:

10 INPUT A$

A$ is the variable name for the input. The $ tagged at the end of the variable name means that the computer will be expecting a string input. 
A without the $ tag means that the computer will be expecting an integer.

10 PRINT "HOW MANY A'S ARE IN SIAAM TODAY?"
20 INPUT A
25 PRINT "SI";
30 FOR I = 1 TO A
40 PRINT "A";
50 NEXT I
60 PRINT "M"

Math:
Math is pretty straight-foward in BASIC. You can do simple operations with *,+,-,/ Operators. However, BASIC by default does decimal division, and not integer division. 

For example
10 PRINT 2/3

will output

.666666667


LET:
The LET command is what's called an "arithmetic variable". These are variables that can be assigned arithmetic functions.

For Example:

10 LET X = 5*3
20 PRINT x

Output: 15

If you do not use the let command when storing operations, the code will not return anything.

10 X = 5*3
20 PRINT X

Output: [no output]

You could also use let to store regular integers.
It would probably be best to get in the habit of using the LET command when making intger variables.


Integers up to 1,000,000,000 will begin to display in scientific notation. Anything past 1E+38 will overflow.

Conditionals:

The IF THEN statement is a simple conditional statement in BASIC. If the condition after the IF is true, THEN jump to a certain line number. 
10 INPUT T
20 IF T > 32 THEN 60
60 PRINT "COOL"


Conditional Operators:
> - Greater Than
< - Less THan
= - Equal To
>= - Greater than or equal to
<= Less than or equal to
<> - Not equal to


